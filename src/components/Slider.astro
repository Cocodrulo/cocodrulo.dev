---
import Icons from '@/assets/icons/IconsHandler'
---

<div class={`slider ${Astro.props.class}`} {...Astro.props}>
    <div class="slider-items">
        <slot />
    </div>
    <button class="slider-prev">
        <Icons.ArrowIcon.icon class="rotate-90 hover:scale-125 transition" />
    </button>
    <button class="slider-next">
        <Icons.ArrowIcon.icon class="-rotate-90 hover:scale-125 transition" />
    </button>
    <div class="pcircles"></div>
</div>

<style is:global>
    .slider {
        display: grid;
        width: 100%;
        max-width: 1000px;
        height: 100%;
        overflow: hidden;
        position: relative;
        grid-template-columns: 60px auto 60px;
        grid-template-rows: auto 20px;
        justify-items: center;
        align-items: center;
    }

    .slider .pcircles {
        width: 100%;
        height: 100%;
        justify-content: center;
        align-items: center;
        display: flex;
        gap: 10px;
        grid-row: 2;
        grid-column: 1 / span 3;
    }

    .slider .pcircles .circle {
        width: 10px;
        aspect-ratio: 1/1;
        border-radius: 50%;
        background-color: #666;
        cursor: pointer;
    }

    .slider .pcircles .circle.selected {
        background-color: #ccc;
        pointer-events: none;
    }

    .slider-items {
        grid-column: 2;
        display: flex;
        width: 100%;
        padding-inline: 10px;
        position: relative;
        overflow: hidden;
        grid-row: 1;
    }

    .slider-items > * {
        flex: 0 0 100%;
        width: 100% !important;
        position: absolute !important;
        z-index: 1;
    }

    .slider-prev,
    .slider-next {
        position: relative;
        height: fit-content;
        width: fit-content;
        z-index: 2;
        grid-row: 1;
    }

    .slider-prev {
        grid-column: 1;
    }

    .slider-next {
        grid-column: 3;
    }

    .slide-in-left {
        animation: slide-in-left 0.5s forwards;
    }

    .slide-in-right {
        animation: slide-in-right 0.5s forwards;
    }

    .slide-out-left {
        animation: slide-out-left 0.5s forwards;
    }

    .slide-out-right {
        animation: slide-out-right 0.5s forwards;
    }

    @keyframes slide-in-left {
        from {
            transform: translateX(-110%);
        }
        to {
            transform: translateX(0);
        }
    }

    @keyframes slide-in-right {
        from {
            transform: translateX(110%);
        }
        to {
            transform: translateX(0);
        }
    }

    @keyframes slide-out-left {
        from {
            transform: translateX(0);
        }
        to {
            transform: translateX(-110%);
        }
    }

    @keyframes slide-out-right {
        from {
            transform: translateX(0);
        }
        to {
            transform: translateX(110%);
        }
    }
</style>

<script>
    import { $$ } from '@/libs/dom-selector'

    const $$sliders = $$('.slider')

    const resetSlide = ($slide: HTMLElement) => {
        $slide.classList.remove(
            'slide-in-left',
            'slide-in-right',
            'slide-out-left',
            'slide-out-right',
        )
    }

    const calculateMaxHeigh = ($$slider: NodeListOf<HTMLElement>) => {
        let maxHeight = 0
        $$slider.forEach(($slide) => {
            if ($slide.clientHeight > maxHeight) {
                maxHeight = $slide.clientHeight
            }
        })
        return `${maxHeight + 16 * 2}px`
    }

    const showNextSlide = (
        $$slides: NodeListOf<HTMLElement>,
        currentSlide: number,
    ) => {
        let index = currentSlide + 1 < $$slides.length ? currentSlide + 1 : 0
        showSlide($$slides, currentSlide, index)
        return index
    }

    const showPrevSlide = (
        $$slides: NodeListOf<HTMLElement>,
        currentSlide: number,
    ) => {
        let index =
            currentSlide - 1 >= 0 ? currentSlide - 1 : $$slides.length - 1
        showSlide($$slides, currentSlide, index)
        return index
    }

    const showSlide = (
        $$slides: NodeListOf<HTMLElement>,
        currentSlide: number,
        index: number,
    ) => {
        if (index < 0 || index >= $$slides.length) return
        if (index > currentSlide) {
            resetSlide($$slides[currentSlide])
            $$slides[currentSlide].classList.add('slide-out-left')

            resetSlide($$slides[index])
            $$slides[index].classList.add('slide-in-right')
        } else {
            resetSlide($$slides[currentSlide])
            $$slides[currentSlide].classList.add('slide-out-right')

            resetSlide($$slides[index])
            $$slides[index].classList.add('slide-in-left')
        }
    }

    $$sliders.forEach(($slider) => {
        let currentSlide = 0
        let startX = 0
        let deltaX = 0

        if (!$slider) return

        const $$slides = $slider.querySelectorAll(
            '.slider-items > *',
        ) as NodeListOf<HTMLElement>

        const $pcircles = $slider.querySelector('.pcircles') as HTMLElement

        const $sliderItems = $slider.querySelector(
            '.slider-items',
        ) as HTMLElement

        if ($sliderItems)
            $sliderItems.style.height = calculateMaxHeigh($$slides)

        $$slides.forEach(($slide, index) => {
            if (index === 0) {
                $slide.classList.add('slide-in-right')
            } else {
                $slide.classList.add('slide-out-right')
            }

            const $circle = document.createElement('div')
            $circle.classList.add('circle')
            if (index === 0) $circle.classList.add('selected')
            $circle.addEventListener('click', () => {
                showSlide($$slides, currentSlide, index)
                currentSlide = index
                $pcircles
                    .querySelector('.circle.selected')
                    ?.classList.remove('selected')
                $circle.classList.add('selected')
            })
            $pcircles.appendChild($circle)
        })

        $slider.querySelector('.slider-prev')?.addEventListener('click', () => {
            currentSlide = showPrevSlide($$slides, currentSlide)
            $pcircles
                .querySelector('.circle.selected')
                ?.classList.remove('selected')
            $pcircles
                .querySelectorAll('.circle')
                [currentSlide].classList.add('selected')
        })

        $slider.querySelector('.slider-next')?.addEventListener('click', () => {
            currentSlide = showNextSlide($$slides, currentSlide)
            $pcircles
                .querySelector('.circle.selected')
                ?.classList.remove('selected')
            $pcircles
                .querySelectorAll('.circle')
                [currentSlide].classList.add('selected')
        })
        ;($slider as HTMLElement).addEventListener(
            'touchstart',
            (e: TouchEvent) => {
                startX = e.touches[0].clientX
            },
        )
        ;($slider as HTMLElement).addEventListener(
            'touchmove',
            (e: TouchEvent) => {
                deltaX = e.touches[0].clientX - startX
            },
        )

        $slider.addEventListener('touchend', () => {
            if (Math.abs(deltaX) > 50) {
                if (deltaX > 0) {
                    currentSlide = showPrevSlide($$slides, currentSlide)
                } else {
                    currentSlide = showNextSlide($$slides, currentSlide)
                }
                $pcircles
                    ?.querySelector('.circle.selected')
                    ?.classList.remove('selected')
                $pcircles
                    ?.querySelectorAll('.circle')
                    [currentSlide].classList.add('selected')
            }
            deltaX = 0
        })

        window.addEventListener('resize', () => {
            if ($sliderItems)
                $sliderItems.style.height = calculateMaxHeigh($$slides)
        })
    })
</script>
