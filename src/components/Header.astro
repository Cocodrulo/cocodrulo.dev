---
import Languages from '@/constants/Languages'
import HeaderItems from '@/constants/HeaderItems'
import Select from '@/components/Select.astro'

interface Props {
    locales: string[]
}

const { locales } = Astro.props
const currentLanguage = Astro.currentLocale as string

let menuItems = HeaderItems[currentLanguage] ?? HeaderItems['es']
---

<header
    class="top-[2%] left-[2.5%] w-[95%] h-[10svh] bg-[var(--bg-dark)] dark:bg-[var(--bg-light)] text-[var(--bg-light)] dark:text-[var(--bg-dark)] sticky z-[51] select-none rounded-[30px]"
>
    <nav class="h-full">
        <ul
            class="flex flex-row justify-between pl-4 pr-4 lg:pl-10 lg:pr-10 h-full items-center text-2xl"
        >
            <div class="flex flex-row items-center justify-center">
                <div class="block lg:hidden menuelmb z-50">
                    <button class="navbar-burger flex items-center p-3">
                        <svg
                            class="block h-5 w-5 fill-current"
                            viewBox="0 0 20 20"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <title>Mobile menu</title>
                            <path
                                d="M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z"
                            ></path>
                        </svg>
                    </button>
                </div>
                <a href="/" class="h-fit w-fit"
                    ><img
                        src="/images/Logo.svg"
                        alt="CocoDev Logo"
                        class="max-w-[unset] w-[5vh] h-auto lg:w-[8vh] lg:h-[8vh] transition-all outline-none drop-shadow-[0_0_20px_var(--bg-light)] dark:drop-shadow-[0_0_20px_var(--bg-dark)] hover:scale-110"
                    /></a
                >
            </div>
            <div
                class="hidden lg:flex flex-row h-full items-center overflow-hidden"
            >
                {
                    menuItems.map((item) => {
                        return (
                            <li
                                class={`menuel m-10 mt-0 mb-0 h-fit w-fit cursor-pointer transition-all ease-linear overflow-hidden hover:drop-shadow-[0_0_20px_var(--bg-light)] hover:dark:drop-shadow-[0_0_20px_var(--bg-dark)]`}
                            >
                                <a href={item.link}>{item.label}</a>
                            </li>
                        )
                    })
                }
            </div>
            <Select
                name="languages"
                id="languages"
                class="bg-transparent text-black outline-none border-none cursor-pointer"
                options={locales.map((locale) => {
                    return {
                        value: Languages[locale].prefix,
                        selected: Languages[locale].prefix === currentLanguage,
                        label: `
                            <span class="flex flex-row gap-x-2 items-center">
                                <img src="${Languages[locale].flag}" alt="${Languages[locale].name}" class="h-4 w-auto ml-2" />
                                ${Languages[locale].name}
                            </span>
                        `,
                        isHTML: true,
                    }
                })}
            />
        </ul>
    </nav>
</header>
<div class="navbar-menu relative z-[70] hidden pointer-events-auto">
    <div class="navbar-backdrop fixed inset-0 opacity-25"></div>
    <nav
        class="fixed top-0 left-0 bottom-0 h-full flex flex-col w-5/6 max-w-sm py-6 px-1 border-r overflow-y-autobg-[var(--bg-dark)] dark:bg-[var(--bg-light)] text-[var(--bg-light)] dark:text-[var(--bg-dark)] drop-shadow-[0_0_20px_var(--bg-light)] dark:drop-shadow-[0_0_20px_var(--bg-dark)]"
    >
        <ul
            class="flex flex-col justify-between pl-7 pr-2 h-full items-center text-2xl overflow-hidden"
        >
            <div class="flex flex-row justify-between w-full">
                <a href="/" class="h-fit w-fit"
                    ><img
                        src="/images/Logo.svg"
                        alt="CocoDev Logo"
                        class="max-w-[unset] w-[8vh] h-[8vh] hover:drop-shadow-[0_0_20px_var(--carmesi-red)] transition-all"
                    /></a
                >
                <button class="navbar-close">
                    <svg
                        class="h-10 w-10 cursor-pointer hover:text-[var(--brown)]"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div
                class="flex flex-col h-full items-start overflow-hidden mt-20 w-full"
            >
                {
                    menuItems.map((item) => {
                        return (
                            <li
                                class={`m-5 mr-0 ml-0 h-fit w-fit cursor-pointertransition-all ease-linear overflow-hidden hover:drop-shadow-[0_0_20px_var(--carmesi-red)]`}
                            >
                                <a href={item.link}>{item.label}</a>
                            </li>
                        )
                    })
                }
            </div>
        </ul>
    </nav>
</div>

<script>
    import { $$ } from '@/libs/dom-selector'
    // Burger menus
    document.addEventListener('DOMContentLoaded', function () {
        // open
        const burger = $$('.navbar-burger')
        const menu = $$('.navbar-menu')

        if (burger.length && menu.length) {
            for (var i = 0; i < burger.length; i++) {
                burger[i].addEventListener('click', function () {
                    for (var j = 0; j < menu.length; j++) {
                        menu[j].classList.toggle('hidden')
                    }
                })
            }
        }

        // close
        const close = $$('.navbar-close')
        const backdrop = $$('.navbar-backdrop')

        if (close.length) {
            for (var i = 0; i < close.length; i++) {
                close[i].addEventListener('click', function () {
                    for (var j = 0; j < menu.length; j++) {
                        menu[j].classList.toggle('hidden')
                    }
                })
            }
        }

        if (backdrop.length) {
            for (var i = 0; i < backdrop.length; i++) {
                backdrop[i].addEventListener('click', function () {
                    for (var j = 0; j < menu.length; j++) {
                        menu[j].classList.toggle('hidden')
                    }
                })
            }
        }
    })
</script>

<style>
    li.active {
        border-bottom: 2px solid var(--brown);
        padding-bottom: 10px;
    }

    li.active:hover {
        border-bottom: 2px solid var(--cream);
    }

    .navbar-menu.hidden {
        animation: palla 0.5s forwards;
    }

    .navbar-menu {
        animation: paca 0.5s forwards;
    }

    @media (prefers-color-scheme: dark) {
        li.active {
            border-bottom: 2px solid var(--cream);
        }

        li.active:hover {
            border-bottom: 2px solid var(--brown);
        }
    }
</style>

<style is:global>
    @keyframes palla {
        0% {
            display: block;
            opacity: 1;
        }
        99% {
            opacity: 0;
        }
        100% {
            display: none;
        }
    }

    @keyframes paca {
        0% {
            display: none;
            opacity: 0;
        }
        1% {
            display: block;
        }
        100% {
            opacity: 1;
        }
    }
</style>

<script>
    import { $ } from '@/libs/dom-selector'

    $('#languages').addEventListener('changeContent', function (e: Event) {
        window.location.href = `${window.location.href.split('/')[0]}/${(e.target as HTMLSelectElement).dataset['value']}/`
    })
</script>
